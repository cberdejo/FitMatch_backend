generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comentario_review {
  comment_id           Int                    @id @default(autoincrement())
  review_id            Int
  user_id              Int
  content              String                 @db.Text
  timestamp            DateTime               @default(dbgenerated("(now())")) @db.Timestamp(0)
  reviews              reviews                @relation(fields: [review_id], references: [review_id], onDelete: Cascade, map: "comentario_review_ibfk_1")
  usuario              usuario                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comentario_review_ibfk_2")
  me_gusta_comentarios me_gusta_comentarios[]

  @@index([review_id], map: "review_id")
  @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ejercicios {
  exercise_id           Int                     @id @default(autoincrement())
  muscle_group_id       Int
  material_id           Int
  user_id               Int?
  name                  String?                 @db.VarChar(255)
  description           String?                 @db.Text
  video                 String?                 @db.VarChar(50)
  grupo_muscular        grupo_muscular          @relation(fields: [muscle_group_id], references: [muscle_group_id], onDelete: Cascade, map: "FK_ejercicios_grupo_muscular")
  material              material                @relation(fields: [material_id], references: [material_id], onDelete: Cascade, map: "FK_ejercicios_material")
  usuario               usuario?                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_ejercicios_usuario")
  ejercicios_detallados ejercicios_detallados[]

  @@index([muscle_group_id], map: "FK_ejercicios_grupo_muscular")
  @@index([material_id], map: "FK_ejercicios_material")
  @@index([user_id], map: "FK_ejercicios_usuario")
}

model ejercicios_detallados {
  detailed_exercise_id            Int                             @id @default(autoincrement())
  grouped_detailed_exercised_id   Int
  exercise_id                     Int
  register_type_id                Int
  notes                           String?                         @db.Text
  order                           Int
  ejercicios                      ejercicios                      @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, map: "FK_ejercicios_detallados_ejercicios")
  ejercicios_detallados_agrupados ejercicios_detallados_agrupados @relation(fields: [grouped_detailed_exercised_id], references: [grouped_detailed_exercised_id], onDelete: Cascade, map: "FK_ejercicios_detallados_ejercicios_detallados_agrupados")
  tipo_de_registro                tipo_de_registro                @relation(fields: [register_type_id], references: [register_type_id], onDelete: Cascade, map: "FK_ejercicios_detallados_tipo_de_registro")
  sets_ejercicios_entrada         sets_ejercicios_entrada[]

  @@index([exercise_id], map: "FK_ejercicios_detallados_ejercicios")
  @@index([grouped_detailed_exercised_id], map: "FK_ejercicios_detallados_ejercicios_detallados_agrupados")
  @@index([register_type_id], map: "FK_ejercicios_detallados_tipo_de_registro")
}

model ejercicios_detallados_agrupados {
  grouped_detailed_exercised_id Int                      @id @default(autoincrement())
  session_id                    Int?
  order                         Int
  ejercicios_detallados         ejercicios_detallados[]
  sesion_de_entrenamiento       sesion_de_entrenamiento? @relation(fields: [session_id], references: [session_id], onDelete: Cascade, map: "FK_ejercicios_detallados_agrupados_sesion_de_entrenamiento")

  @@index([session_id], map: "FK_ejercicios_detallados_agrupados_sesion_de_entrenamiento")
}

model etiquetas {
  tag_id                      Int                         @id @default(autoincrement())
  template_id                 Int
  experience                  String?                     @db.VarChar(255)
  interests                   String?                     @db.VarChar(50)
  objectives                  String?                     @db.VarChar(50)
  equipment                   String?                     @db.VarChar(50)
  duration                    String?                     @db.VarChar(50)
  plantillas_de_entrenamiento plantillas_de_entrenamiento @relation(fields: [template_id], references: [template_id], onDelete: Cascade, map: "FK_emparejamiento_plantillas_de_entrenamiento")

  @@index([template_id], map: "FK_emparejamiento_plantillas_de_entrenamiento")
}

model grupo_muscular {
  muscle_group_id Int          @id @default(autoincrement())
  name            String?      @unique(map: "name") @db.VarChar(50)
  ejercicios      ejercicios[]
}

model material {
  material_id Int          @id @default(autoincrement())
  name        String       @default("0") @db.VarChar(50)
  ejercicios  ejercicios[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model me_gusta_comentarios {
  liked_comment_id  Int               @id @default(autoincrement())
  comment_id        Int
  user_id           Int
  comentario_review comentario_review @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade, map: "FK_me_gusta_comentarios_comentario_review")
  usuario           usuario           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_me_gusta_comentarios_usuario")

  @@index([comment_id], map: "FK_me_gusta_comentarios_comentario_review")
  @@index([user_id], map: "FK_me_gusta_comentarios_usuario")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model me_gusta_reviews {
  liked_review_id Int     @id @default(autoincrement())
  review_id       Int
  user_id         Int
  reviews         reviews @relation(fields: [review_id], references: [review_id], onDelete: Cascade, map: "FK_me_gusta_reviews_reviews")
  usuario         usuario @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "me_gusta_reviews_ibfk_2")

  @@unique([review_id, user_id], map: "review_id_user_id")
  @@index([review_id], map: "review_id")
  @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model perfil {
  profile_id Int       @id @default(autoincrement())
  rol        String    @default("") @db.VarChar(50)
  usuario    usuario[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model plantillas_de_entrenamiento {
  template_id             Int                       @id @default(autoincrement())
  user_id                 Int
  template_name           String?                   @db.VarChar(255)
  picture                 String?                   @db.VarChar(255)
  description             String?                   @db.Text
  public                  Boolean                   @default(false) @db.Bit(1)
  hidden                  Boolean                   @default(false) @db.Bit(1)
  fecha_creacion          DateTime                  @default(dbgenerated("(now())")) @db.Date
  etiquetas               etiquetas[]
  usuario                 usuario                   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_plantillas_de_entrenamiento_usuario")
  reviews                 reviews[]
  rutinas_archivadas      rutinas_archivadas[]
  rutinas_guardadas       rutinas_guardadas[]
  sesion_de_entrenamiento sesion_de_entrenamiento[]

  @@index([user_id], map: "FK_plantillas_de_entrenamiento_usuario")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model registro_set {
  register_set_id         Int                     @id @default(autoincrement())
  register_session_id     Int?
  set_id                  Int
  reps                    Int?
  weight                  Float?
  time                    Float?
  timestamp               DateTime                @default(dbgenerated("(now())")) @db.Timestamp(0)
  video                   String?                 @db.VarChar(50)
  registro_de_sesion      registro_de_sesion?     @relation(fields: [register_session_id], references: [register_session_id], onDelete: Cascade, map: "FK_registro_set_registro_de_sesion")
  sets_ejercicios_entrada sets_ejercicios_entrada @relation(fields: [set_id], references: [set_id], onDelete: Cascade, map: "FK_registro_set_sets_ejercicios_entrada")

  @@index([set_id], map: "FK_registro_set_sets_ejercicios_entrada")
  @@index([register_session_id], map: "FK_registro_set_registro_de_sesion")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reviews {
  review_id                   Int                         @id @default(autoincrement())
  user_id                     Int
  template_id                 Int
  rating                      Float
  review_content              String?                     @db.Text
  timestamp                   DateTime                    @default(dbgenerated("(now())")) @db.Timestamp(0)
  comentario_review           comentario_review[]
  me_gusta_reviews            me_gusta_reviews[]
  plantillas_de_entrenamiento plantillas_de_entrenamiento @relation(fields: [template_id], references: [template_id], onDelete: Cascade, map: "FK_reviews_plantillas_de_entrenamiento")
  usuario                     usuario                     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_reviews_usuario")

  @@index([template_id], map: "FK_reviews_plantillas_de_entrenamiento")
  @@index([user_id], map: "FK_reviews_usuario")
}

model rutinas_archivadas {
  archived_id                 Int                         @id @default(autoincrement())
  template_id                 Int                         @default(0)
  user_id                     Int                         @default(0)
  hidden                      Boolean                     @default(false) @db.Bit(1)
  plantillas_de_entrenamiento plantillas_de_entrenamiento @relation(fields: [template_id], references: [template_id], onDelete: Cascade, map: "FK_rutinas_archivadas_plantillas_de_entrenamiento")
  usuario                     usuario                     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_rutinas_archivadas_usuario")

  @@unique([template_id, user_id], map: "template_id_user_id")
  @@index([user_id], map: "FK_rutinas_archivadas_usuario")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model rutinas_guardadas {
  saved_id                    Int                         @id @default(autoincrement())
  user_id                     Int
  template_id                 Int
  hidden                      Boolean                     @default(false) @db.Bit(1)
  plantillas_de_entrenamiento plantillas_de_entrenamiento @relation(fields: [template_id], references: [template_id], onDelete: Cascade, map: "FK_rutinas_guardadas_plantillas_de_entrenamiento")
  usuario                     usuario                     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_rutinas_guardadas_usuario")

  @@unique([template_id, user_id], map: "template_id")
  @@index([user_id], map: "FK_rutinas_guardadas_usuario")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sesion_de_entrenamiento {
  session_id                      Int                               @id @default(autoincrement())
  template_id                     Int
  session_name                    String                            @db.VarChar(50)
  session_date                    DateTime                          @default(dbgenerated("(now())")) @db.Date
  notes                           String?                           @db.Text
  order                           Int                               @default(0)
  activa                          Boolean                           @db.Bit(1)
  ejercicios_detallados_agrupados ejercicios_detallados_agrupados[]
  registro_de_sesion              registro_de_sesion[]
  plantillas_de_entrenamiento     plantillas_de_entrenamiento       @relation(fields: [template_id], references: [template_id], onDelete: NoAction, onUpdate: NoAction, map: "sesion_de_entrenamiento_ibfk_1")

  @@index([template_id], map: "template_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sets_ejercicios_entrada {
  set_id                Int                    @id @default(autoincrement())
  detailed_exercise_id  Int?
  set_order             Int
  reps                  Int?
  time                  Float?
  min_reps              Int?
  max_reps              Int?
  min_time              Float?
  max_time              Float?
  registro_set          registro_set[]
  ejercicios_detallados ejercicios_detallados? @relation(fields: [detailed_exercise_id], references: [detailed_exercise_id], onDelete: Cascade, map: "FK_sets_ejercicios_entrada_ejercicios_detallados")

  @@index([detailed_exercise_id], map: "FK_sets_ejercicios_entrada_ejercicios_detallados")
}

model tipo_de_registro {
  register_type_id      Int                     @id @default(autoincrement())
  name                  String?                 @db.VarChar(50)
  ejercicios_detallados ejercicios_detallados[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model usuario {
  user_id                     Int                           @id @default(autoincrement())
  profile_id                  Int                           @default(2)
  username                    String                        @db.VarChar(255)
  email                       String                        @unique(map: "email") @db.VarChar(255)
  password                    String                        @db.VarChar(255)
  profile_picture             String?                       @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png") @db.VarChar(255)
  birth                       DateTime?                     @default(dbgenerated("(now())")) @db.Date
  system                      String                        @default("metrico") @db.VarChar(50)
  bio                         String?                       @db.Text
  public                      Boolean                       @default(true) @db.Bit(1)
  comentario_review           comentario_review[]
  ejercicios                  ejercicios[]
  me_gusta_comentarios        me_gusta_comentarios[]
  me_gusta_reviews            me_gusta_reviews[]
  medidas                     medidas[]
  notificacion                notificacion[]
  plantillas_de_entrenamiento plantillas_de_entrenamiento[]
  registro_de_sesion          registro_de_sesion[]
  reviews                     reviews[]
  rutinas_archivadas          rutinas_archivadas[]
  rutinas_guardadas           rutinas_guardadas[]
  perfil                      perfil                        @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade, map: "FK_usuario_perfil")

  @@index([profile_id], map: "FK_usuario_perfil")
}

model registro_de_sesion {
  register_session_id     Int                     @id @default(autoincrement())
  user_id                 Int
  session_id              Int
  date                    DateTime                @default(dbgenerated("(now())")) @db.Timestamp(0)
  final_date              DateTime?               @db.Timestamp(0)
  finished                Boolean                 @default(false) @db.Bit(1)
  sesion_de_entrenamiento sesion_de_entrenamiento @relation(fields: [session_id], references: [session_id], onDelete: Cascade, map: "FK_registro_de_sesion_sesion_de_entrenamiento")
  usuario                 usuario                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_registro_sesion_usuario")
  registro_set            registro_set[]

  @@index([session_id], map: "FK_registro_de_sesion_sesion_de_entrenamiento")
  @@index([user_id], map: "FK_registro_sesion_usuario")
}

model notificacion {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  type            String   @db.VarChar(50)
  mensaje         String   @db.Text
  read            Boolean  @default(false) @db.Bit(1)
  timestamp       DateTime @default(dbgenerated("(0)")) @db.Timestamp(0)
  usuario         usuario  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_notificacion_usuario")

  @@index([user_id], map: "FK_notificacion_usuario")
}

model fotos_progreso {
  id             Int     @id @default(autoincrement())
  measurement_id Int
  imagen         String  @db.VarChar(255)
  medidas        medidas @relation(fields: [measurement_id], references: [measurement_id], onDelete: Cascade, map: "FK_fotos_progreso_medidas")

  @@index([measurement_id], map: "FK_fotos_progreso_medidas")
}

model medidas {
  measurement_id  Int              @id @default(autoincrement())
  user_id         Int
  left_arm        Float?           @map("left arm")
  right_arm       Float?           @map("right arm")
  shoulders       Float?
  neck            Float?
  chest           Float?
  waist           Float?
  upper_left_leg  Float?           @map("upper left leg")
  upper_right_leg Float?           @map("upper right leg")
  left_calve      Float?           @map("left calve")
  right_calve     Float?           @map("right calve")
  weight          Float?
  fotos_progreso  fotos_progreso[]
  usuario         usuario          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_medidas_usuario")

  @@index([user_id], map: "FK_medidas_usuario")
}
